// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
 model UserData{
    id String @unique
    password String
    user_type String
 }

 model Patient{
    first_name String
    last_name String
    contact_number BigInt
    email_id String?
    patient_id String @id 
    gender String
    fathers_name String?
    husbands_name String?
    age Int
    address_line1 String?
    address_line2 String?
    city String?
    state String?
    pin_code Int?
    country String?
    prescriptions Prescription[]
 }

 model Prescription{
    prescription_id String 
    patient_id String
    date DateTime
    is_template  Boolean
    patient Patient @relation(fields: [prescription_id], references: [patient_id])   
    prescription_diagnos_data PrescriptionDiagnosData[]
    prescription_medicine_data PrescriptionMedicineData[]
    @@id([patient_id,prescription_id])
 }

 model PrescriptionDiagnosData{
    prescription_id String 
    patient_id String
    symptom String[]
    bp String
    diagnosis String[]
    weight Int
    note String
    prescription    Prescription @relation(fields: [prescription_id,patient_id], references: [prescription_id,patient_id])
    @@id([prescription_id,patient_id])
 }

 model PrescriptionMedicineData{
    prescription_id String
    patient_id String
    medicine String
    repeatitions String
    prescription    Prescription @relation(fields: [prescription_id,patient_id], references: [prescription_id,patient_id])
    @@id([prescription_id,patient_id,medicine])
 }

model Medicine{
    name String @id
}

model Symptom{
    name String @id
}